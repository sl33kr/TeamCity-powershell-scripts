function PatchNuSpecFile($nugetExe, $projectFile, $version, $releaseNotes)
{
    $nuspecFilename = $projectFile.FullName -replace "\.(cs|vb)proj$", ".nuspec"

    $generatedByScript = $false

    if (!(Test-Path $nuspecFilename))
    {
        $currentLocation = Get-Location
        Set-Location $projectFile.Directory.FullName
        $command = $nugetExe.FullName
        & $command "spec"
        Set-Location $currentLocation
        $generatedByScript = $true
    }

    $nuspecFile = Get-ChildItem $nuspecFilename

    Write-Host "Patching nuspec file for " $projectFile.Name

    $content = Get-Content $nuspecFile | Out-String

    # Replace some of the genericly inserted crap that we don't use.
    $content = $content -replace '<version>\$version\$<\/version>', "<version>$version</version>"
    $content = $content -replace "\s*<licenseUrl>http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE</licenseUrl>", ""
    $content = $content -replace "\s*<projectUrl>http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE</projectUrl>", ""
    $content = $content -replace "\s*<iconUrl>http://ICON_URL_HERE_OR_DELETE_THIS_LINE</iconUrl>", ""
	$content = $content -replace '<authors>\$author\$</authors>', ""
	$content = $content -replace '<owners>\$author\$</owners>', ""
	
	if ([string]::IsNullOrWhiteSpace($releaseNotes))
    {
		$content = $content -replace "\s*<releaseNotes>Summary of changes made in this release of the package.</releaseNotes>", ""
	}
	else
	{
        $generatedReleaseNoteTag = "<releaseNotes>Summary of changes made in this release of the package.</releaseNotes>"
        $emptyReleaseNoteTag = "<releaseNotes></releaseNotes>"
        $anyReleaseNotes = "<releaseNotes>.*</releaseNotes>"
        $newReleaseNotes = "<releaseNotes>$releaseNotes</releaseNotes>"

        if ($content -match $generatedReleaseNoteTag -or $content -match $emptyReleaseNoteTag)
		{
            $content = $content -replace $anyReleaseNotes, $newReleaseNotes
        }
        elseif (-not ($content -match $anyReleaseNotes))
        {
            $metadataCloseTag = "  </metadata>"
            
            $content = $content -replace $metadataCloseTag, "    $newReleaseNotes`r`n$metadataCloseTag"
        }
	}
	
    $content = $content -replace "\s*<tags>Tag1 Tag2</tags>", ""

    # If this file was generated by this script the below required elements will have invalid
    # values, so set them!
    if ($generatedByScript)
    {
        $description = [System.IO.Path]::GetFileNameWithoutExtension($projectFile)
        $content = $content -replace '<description>\$description\$</description>', "<description>$description</description>"
		$content = $content -replace '<title>\$title\$</title>', '<title>$id$</title>'
    }

    Set-Content $nuspecFile $content
}

function Invoke-NuspecGenerator ($pathToNugetExe, $version, $workingDirectoriesString, $releaseNotes)
{
	$nugetExe = Get-ChildItem "$pathToNugetExe\tools\nuget.exe"

	$workingDirectoriesString.Split(";") | Get-ChildItem -Recurse |
		Where-Object { $_.Name -match "\.(cs|vb)proj$" } |
		ForEach-Object { PatchNuSpecFile $nugetExe $_ $version $releaseNotes }
}